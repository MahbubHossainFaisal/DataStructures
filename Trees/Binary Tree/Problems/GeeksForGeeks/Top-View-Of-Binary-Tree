<<<<<<< HEAD
#include<bits/stdc++.h>

using namespace std;


string convertToString(char* a, int size)
{
    int i;
    string s = "";
    for (i = 0; i < size; i++) {
        s = s + a[i];
    }
    return s;
}


void checkFunction(){

    char regx[25],result[25];

    cout<<"Enter the Regular Expression : ";
    cin>>regx;
    cout<<"Enter the result : ";
    cin>>result;



    if(regx[3]=='*'){

       int size_regx=sizeof(regx);
       int size_result=sizeof(result);
       string regxS = convertToString(regx,size_regx);
       string resultS = convertToString(result,size_result);

       // cout<<regxS.substr(0,2);
        cout<<resultS;



    }
    else {
        cout<<"not match";
    }

}

void CaseCheck()
{
     cout<<"\n 1. Check \n 2.Exit"<<endl;
    int check;
    cin>>check;
    switch(check){

    case 1: checkFunction();
        cout<<"\n";
        CaseCheck();
        break;
    case 2: exit(0);
        break;
    default:
        cout<<"Error";

    }
}

int main()
{
    CaseCheck();
    return 0;
}
=======
vector<int> topView(struct Node *root)
{
    vector <int> ans;
   if(root == NULL){
       return ans;
   }
   
   map<int,vector<int>> m;
   int hd =0;
   queue<pair<Node* , int>> q;
    q.push(make_pair(root,hd));
    
    while(!q.empty()){
        pair<Node*,int> temp = q.front();
        q.pop();
        Node* node = temp.first;
        hd = temp.second;
        
        m[hd].push_back(node->data);
        
        if(node->left){
            q.push(make_pair(node->left,hd-1));
        }
        if(node->right){
            q.push(make_pair(node->right,hd+1));
        }
    }
    
    
    map<int,vector<int>> :: iterator it;
    
    for(it=m.begin(); it!=m.end();it++){
        
         for(int i=0;i<it->second.size();i++){
             ans.push_back(it->second[i]);
             break;
         }
    }
   
    return ans;
   
}
>>>>>>> dd3315e4c7c383fbb05c83376eb6909ca018f082
